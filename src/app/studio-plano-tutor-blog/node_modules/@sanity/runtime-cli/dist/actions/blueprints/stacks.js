import config from '../../config.js';
import getHeaders from '../../utils/get-headers.js';
const { apiUrl } = config;
export const stacksUrl = `${apiUrl}vX/blueprints/stacks`;
export async function listStacks(auth) {
    const response = await fetch(stacksUrl, {
        method: 'GET',
        headers: getHeaders(auth),
    });
    const stacks = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stacks.message,
        stacks,
    };
}
export async function getStack({ stackId, auth, }) {
    const response = await fetch(`${stacksUrl}/${stackId}`, {
        method: 'GET',
        headers: getHeaders(auth),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
export async function createStack({ stackPayload, auth, }) {
    const response = await fetch(stacksUrl, {
        method: 'POST',
        headers: getHeaders(auth),
        body: JSON.stringify(stackPayload),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
export async function createEmptyStack({ token, projectId, name, projectBased = true, }) {
    const stackPayload = {
        name,
        projectId,
        useProjectBasedId: projectBased,
        document: { resources: [] },
    };
    const auth = { token, projectId };
    const response = await createStack({ stackPayload, auth });
    if (!response.ok) {
        throw new Error(response.error || 'Failed to create new Stack');
    }
    return response.stack;
}
export async function updateStack({ stackId, stackPayload, auth, }) {
    const response = await fetch(`${stacksUrl}/${stackId}`, {
        method: 'PUT',
        headers: getHeaders(auth),
        body: JSON.stringify(stackPayload),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
export async function destroyStack({ stackId, auth, }) {
    const response = await fetch(`${stacksUrl}/${stackId}`, {
        method: 'DELETE',
        headers: getHeaders(auth),
    });
    const stack = await response.json();
    return {
        ok: response.ok,
        error: response.ok ? null : stack.message,
        stack,
    };
}
