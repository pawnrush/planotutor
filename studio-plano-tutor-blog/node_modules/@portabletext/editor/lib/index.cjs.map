{"version":3,"file":"index.cjs","sources":["../src/editor-event-listener.tsx","../src/internal-utils/debug.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/internal-utils/drag-selection.ts","../src/editor/key-generator.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/create-placeholder-block.ts","../src/editor/get-active-annotations.ts","../src/editor/get-active-decorators.ts","../src/operations/behavior.operation.insert.text.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/editor-selector.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.insert-inline-object.ts","../src/operations/behavior.operation.insert-span.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-applying-behavior-operations.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/operation-to-patches.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/internal-utils/mark-state.ts","../src/editor/plugins/slate-plugin.update-mark-state.ts","../src/editor/plugins/slate-plugin.update-selection.ts","../src/internal-utils/portable-text-node.ts","../src/internal-utils/apply-operation-to-portable-text.ts","../src/editor/plugins/slate-plugin.update-value.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behaviors/behavior.core.annotations.ts","../src/internal-utils/is-hotkey.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/internal-utils/compound-client-rect.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert-break.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/internal-utils/selection-elements.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.insert.ts","../src/internal-utils/key-is.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/legacy-schema.ts","../src/editor/editor-schema.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/relay-actor-context.ts","../src/editor/route-events-to-changes.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/range-decorations-machine.ts","../src/editor/Editable.tsx","../src/internal-utils/use-constant.ts","../src/editor/editor-provider.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import {getDragSelection} from '../internal-utils/drag-selection'\nimport type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {RenderBlockFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .blockObjects.find(\n        (blockObject) => blockObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Block object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: (\n              <RenderDefaultBlockObject blockObject={props.blockObject} />\n            ),\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: props.blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={props.blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {RenderChildFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  inlineObject: PortableTextObject\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Inline object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={props.inlineObject._key}\n      data-child-name={props.inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: (\n              <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n            ),\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: props.inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  let children = props.children\n\n  const legacyBlockSchemaType = legacySchema.block\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: legacyBlockSchemaType,\n              style: props.textBlock.style,\n              type: legacyBlockSchemaType,\n              value: props.textBlock,\n            })\n          : children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport type {RenderElementProps} from 'slate-react'\nimport {isTextBlock} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    const inlineObject = {\n      _key: props.element._key,\n      _type: props.element._type,\n      ...('value' in props.element && typeof props.element.value === 'object'\n        ? props.element.value\n        : {}),\n    }\n\n    if (\n      !schema.inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      )\n    ) {\n      console.error(\n        `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n      )\n    }\n\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        inlineObject={\n          inlineObject ?? {\n            _key: props.element._key,\n            _type: props.element._type,\n          }\n        }\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  if (isTextBlock({schema}, props.element)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={props.element}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  const blockObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  if (\n    !schema.blockObjects.find(\n      (blockObject) => blockObject.name === props.element._type,\n    )\n  ) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={\n        blockObject ?? {\n          _key: props.element._key,\n          _type: props.element._type,\n        }\n      }\n      element={props.element}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      context: {\n        selection,\n        schema: snapshot.context.schema,\n      },\n      blocks: snapshot.context.value,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          refreshKeys: true,\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveAnnotations({\n  markState,\n  schema,\n}: {\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  decoratorState,\n  markState,\n  schema,\n}: {\n  decoratorState: Record<string, boolean | undefined>\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {Transforms} from 'slate'\nimport {getActiveAnnotations} from '../editor/get-active-annotations'\nimport {getActiveDecorators} from '../editor/get-active-decorators'\nimport {getFocusSpan} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const activeDecorators = getActiveDecorators({\n    decoratorState: operation.editor.decoratorState,\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n  const activeAnnotations = getActiveAnnotations({\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (\n    operation.editor.markState &&\n    operation.editor.markState.state === 'unchanged'\n  ) {\n    const markStateDecorators = (operation.editor.markState.marks ?? []).filter(\n      (mark) =>\n        context.schema.decorators\n          .map((decorator) => decorator.name)\n          .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: slateEditorInstance.decoratorState,\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n    },\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        if (!editor.markState) {\n          apply(op)\n          return\n        }\n\n        if (editor.markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: editor.markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: snapshot.beta.activeDecorators},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId !== undefined && previousUndoStepId === undefined\n          ? false\n          : currentUndoStepId !== undefined && previousUndoStepId !== undefined\n            ? currentUndoStepId === previousUndoStepId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n      },\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Transforms} from 'slate'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n\n  const anchorBlockPath =\n    anchorBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: anchorBlockKey,\n        })\n      : undefined\n  const focusBlockPath =\n    focusBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: focusBlockKey,\n        })\n      : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {Range} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {getSelectedSpans} from '../selectors'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getNextSpan, getPreviousSpan} from './sibling-utils'\nimport {getFocusBlock, getFocusSpan, slateRangeToSelection} from './slate-utils'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport function getMarkState({\n  schema,\n  editor,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n}): MarkState | undefined {\n  if (!editor.selection) {\n    return undefined\n  }\n\n  const [block, blockPath] = getFocusBlock({\n    editor,\n  })\n  const [span, spanPath] = getFocusSpan({\n    editor,\n  })\n\n  if (!block || !editor.isTextBlock(block) || !span) {\n    return undefined\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    const selection = editor.selection\n      ? slateRangeToSelection({\n          schema,\n          editor,\n          range: editor.selection,\n        })\n      : null\n\n    const selectedSpans = getSelectedSpans({\n      context: {\n        value: editor.value,\n        selection,\n        schema,\n        converters: [],\n        keyGenerator: () => '',\n        readOnly: false,\n      },\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n      },\n    })\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (\n          span.node.marks?.length === 0 ||\n          (span.node.marks ?? [])?.some((mark) => !marks.includes(mark))\n        ) {\n          marks = []\n        }\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n  const marks = span.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = span.text.length === 0\n\n  const atTheBeginningOfSpan = editor.selection.anchor.offset === 0\n  const atTheEndOfSpan = editor.selection.anchor.offset === span.text.length\n\n  const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n  const nextSpan = getNextSpan({editor, blockPath, spanPath})\n  const nextSpanAnnotations =\n    nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: span.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: span.marks ?? [],\n  }\n}\n","import {getMarkState} from '../../internal-utils/mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateMarkState(\n  context: Pick<EditorContext, 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    apply(operation)\n\n    editor.markState = getMarkState({\n      editor,\n      schema: context.schema,\n    })\n  }\n\n  return editor\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateMarkState} from './slate-plugin.update-mark-state'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateMarkState(\n                        editorActor.getSnapshot().context,\n                        pluginUpdateSelection({\n                          editorActor,\n                          editor: e,\n                        }),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratorState = {}\n  instance.markState = undefined\n  instance.value = [\n    createPlaceholderBlock(config.editorActor.getSnapshot().context),\n  ]\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport * as selectors from '../selectors'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusInlineObject = selectors.getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {BehaviorEvent} from '../behaviors'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return []\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  return blockEntries.map(([blockNode]) =>\n    DOMEditor.toDOMNode(slateEditor, blockNode),\n  )\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return []\n  }\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  return childEntries.map(([childNode]) =>\n    DOMEditor.toDOMNode(slateEditor, childNode),\n  )\n}\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {\n          activeAnnotations: [],\n          activeDecorators: [],\n        },\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: event.select ?? 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: event.select ?? 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: event.select ?? 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: event.select ?? 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: event.select ?? 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","export const keyIs = {\n  break: (event) => event.key === 'Enter' && !event.shiftKey,\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      keyIs.break(event.originEvent) &&\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) => keyIs.lineBreak(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = utils.getSelectionStartPoint(selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: utils\n          .sliceBlocks({\n            context: {\n              ...snapshot.context,\n              selection: newTextBlockSelection,\n            },\n            blocks: [focusTextBlock.node],\n          })\n          .at(0),\n        context: snapshot.context,\n        options: {refreshKeys: true, validateFields: true},\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        utils.isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.beta.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {createEditorDom} from '../internal-utils/selection-elements'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              nativeEventPrevented = true\n\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              nativeEventPrevented = true\n\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            nativeEventPrevented = true\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: isAbstractBehaviorEvent(action.event)\n                ? behaviors\n                : [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n              sendBack,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          nativeEventPrevented = true\n\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          nativeEventPrevented = true\n\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    activeAnnotations: Array<string>\n    activeDecorators: Array<string>\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: editor.markState,\n        schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: editor.decoratorState,\n        markState: editor.markState,\n        schema,\n      }),\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = sortByPriority([\n          ...context.behaviors.values(),\n          ...coreBehaviorsConfig,\n        ]).map((config) => config.behavior)\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (event) => self.send(event),\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'mutation delay passed'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation debouncer': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'mutation delay passed'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 0,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation debouncer',\n          },\n          on: {\n            'mutation delay passed': {\n              guard: and([\n                not('is read-only'),\n                not('is typing'),\n                'slate is normalizing',\n              ]),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport {isActiveAnnotation} from '../../selectors'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return snapshot.beta.activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return [\n        ...snapshot.beta.activeAnnotations,\n        ...snapshot.beta.activeDecorators,\n      ]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editor._internal.editorActor}\n                >\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              <PortableTextEditorSelectionProvider\n                editorActor={internalEditor.actors.editorActor}\n              >\n                {props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","rootName","debug","debugWithName","name","namespace","enabled","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getBlockPath","blockPath","from","Editor","nodes","at","match","n","blockIndex","getFocusBlock","selection","node","focus","path","slice","getFocusSpan","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","utils","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","isKeySegment","isVoid","childPath","findIndex","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","jsx","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","jsxs","RenderDefaultInlineObject","inlineObject","getDragSelection","snapshot","dragSelection","selectors","draggingCollapsedSelection","draggedTextBlock","draggedSpan","getSelectedBlocks","selectionStartBlock","selectionEndBlock","defaultKeyGenerator","randomKey","getByteHexTable","table","i","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","useSlateStatic","selected","useSelected","legacySchemaType","useSelector","s","getLegacySchema","error","focused","isCollapsed","attributes","readOnly","renderBlock","editorElementRef","schemaType","RenderInlineObject","inlineObjectRef","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","legacySchema","legacyBlockSchemaType","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","_temp","inlineObject_0","t3","blockObject_0","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","options","refreshKeys","validateFields","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","keyGenerator","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","filter","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","get","createPlaceholderBlock","getActiveAnnotations","markState","mark","decorators","decorator","includes","getActiveDecorators","decoratorState","activeDecorators","activeDecorator","insertTextOperationImplementation","activeAnnotations","focusSpan","Transforms","insertText","state","markStateDecorators","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","set","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","beta","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","origin","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","anchorBlockPath","removeNodes","delete","unit","insertInlineObjectOperationImplementation","parsedInlineObject","parseInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","placement","select","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","splitNodes","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","editorDelete","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","newNode","applyAll","reservedProps","nextRest","prevChildren","prevRest","blockNode","newVal","previousSelection","_","pteCreateTextBlock","newKeys","keys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","isSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","debugVerbose","previousValue","operationId","createWithPlaceholderBlock","insertNode","createWithSchemaTypes","obj","createWithUtils","getMarkState","selectedSpans","getSelectedSpans","marksWithoutAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","pluginUpdateMarkState","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","e","finishDraft","applyOperationToPortableTextDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","initialValue","addAnnotationOnCollapsedSelection","isSelectionCollapsed","caretWordSelection","getCaretWordSelection","raise","coreAnnotationBehaviors","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","getFocusBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","rect","min","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","getBlockNodes","childNodes","getChildNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragGhost","ghost","blocksDomRect","clonedChildNodes","childrenDomRect","isOverlappingSelection","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","createEditorDom","sendBack","childNode","setDragImage","abstractAnnotationBehaviors","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","keyIs","lineBreak","abstractKeyboardBehaviors","getFocusInlineObject","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","blockEndPoint","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","textRuns","getTextBlockText","textRun","isSelectionExpanded","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","Map","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","internalDrag","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","originalApply","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","stateIn","typing","slate is normalizing","isNormalizing","delays","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","updateValue","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","startTransition","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","Slate","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","slateRange","onMoved","decoratedRange","newRangeSelection","updateCount","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createDecorate","rangeDecorationActor","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSlate","rangeDecorationsActor","useActorRef","decorate","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","t10","EditorContext"],"mappings":"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","x_google_ignoreList":[34,40]}